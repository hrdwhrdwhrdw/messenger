{"version":3,"file":"static/js/946.19219fb7.chunk.js","mappings":"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","sources":["components/Controls/Checkbox/Checkbox.tsx","webpack://messenger/./src/components/Controls/Input/Input.module.scss?7ec4","components/Controls/Input/Input.tsx","constants/styles.ts","helpers/maxLength.js","components/Forms/login-form/LoginForm.tsx","pages/login-page/Login.tsx","pages/login-page/LoginContainer.tsx","validation/validation.ts"],"sourcesContent":["import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\n\r\nimport \"./Checkbox.scss\";\r\n\r\nexport default function Checkbox(props) {\r\n  return (\r\n    <div className=\"button r\" id=\"button\">\r\n      <Field\r\n        name={props.name}\r\n        className=\"checkbox\"\r\n        component={\"input\"}\r\n        type={\"checkbox\"}\r\n      />\r\n      <div className=\"knobs\"></div>\r\n      <div className=\"layer\"></div>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Input_error__O0Hvc\",\"summary\":\"Input_summary__+Ln--\"};","import React from \"react\";\r\nimport { Input } from \"@material-ui/core\";\r\nimport { PURPLE } from \"../../../constants/styles\";\r\nimport styles from \"./Input.module.scss\";\r\nimport { WrappedFieldProps } from \"redux-form/lib/Field\";\r\n\r\nexport const CustomInput: React.FC<WrappedFieldProps> = ({\r\n  input,\r\n  meta,\r\n  ...props\r\n}) => {\r\n  const hasError = meta?.touched && meta?.error;\r\n  const inputStyles = {\r\n    padding: \"5px\",\r\n    fontSize: \"12px\",\r\n    width: \"100%\",\r\n    color: \"#61656e\",\r\n    fontWeight: \"bold\",\r\n    backgroundColor: \"#151922\",\r\n    borderRadius: \"5px\",\r\n    border: \"none\",\r\n    \":before\": {\r\n      display: \"none\",\r\n    },\r\n    \"&::after\": {\r\n      border: \"1px solid\" + PURPLE,\r\n      backgroundColor: PURPLE,\r\n    },\r\n  };\r\n  return (\r\n    <div className={hasError ? styles.error : null}>\r\n      <Input sx={inputStyles} {...input} {...props} />\r\n      <div>{hasError ? <span>{meta.error}</span> : null}</div>\r\n    </div>\r\n  );\r\n};\r\n","export const PURPLE = \"#7663fd\";\r\nexport const BURGUNDY = \"#321738\";\r\nexport const WHITE = \"#fff\";","import { maxLengthCreator } from \"../validation/validation\";\r\n\r\nexport const maxLength100 = maxLengthCreator(100);\r\n\r\nexport const maxLength50 = maxLengthCreator(50);\r\n\r\n","import {\r\n  LoginFormOwnPropsType,\r\n  LoginFormValuesType,\r\n} from \"pages/login-page/Login\";\r\nimport React from \"react\";\r\nimport { InjectedFormProps, Field, reduxForm } from \"redux-form\";\r\nimport { maxLength50 } from \"../../../helpers/maxLength\";\r\nimport { required } from \"../../../validation/validation\";\r\nimport CustomButton from \"../../Button/Button\";\r\nimport Checkbox from \"../../Controls/Checkbox/Checkbox\";\r\nimport { CustomInput } from \"../../Controls/Input/Input\";\r\n\r\nconst LoginForm: React.FC<\r\n  InjectedFormProps<LoginFormValuesType, LoginFormOwnPropsType> &\r\n    LoginFormOwnPropsType\r\n> = ({ handleSubmit, error, captchaURL }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"login__input-container\">\r\n        <Field\r\n          placeholder=\"login\"\r\n          name=\"login\"\r\n          validate={[required, maxLength50]}\r\n          component={CustomInput}\r\n        />\r\n      </div>\r\n      <div className=\"login__input-container\">\r\n        <Field\r\n          placeholder=\"password\"\r\n          name=\"password\"\r\n          validate={[required, maxLength50]}\r\n          component={CustomInput}\r\n          type=\"password\"\r\n        />\r\n      </div>\r\n      <div className=\"login__rememberMe\">\r\n        <span>remember me</span>\r\n        <Checkbox name=\"remember\" />\r\n      </div>\r\n      {error && <div className=\"summary\">{error}</div>}\r\n      {captchaURL && (\r\n        <div className=\"login__captcha\">\r\n          <img src={captchaURL} className=\"captcha__image\" alt=\"\" />\r\n        </div>\r\n      )}\r\n      {captchaURL && (\r\n        <Field name=\"captcha\" component={CustomInput} validate={[required]} />\r\n      )}\r\n      <CustomButton type=\"submit\" sx={{ width: \"100%\", marginTop: \"1rem\" }}>\r\n        Log In\r\n      </CustomButton>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType & LoginFormOwnPropsType>({\r\n  form: \"login\",\r\n})(LoginForm);\r\n\r\nexport default LoginReduxForm;\r\n","import React from \"react\";\r\nimport \"./Login.scss\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport LoginReduxForm from \"../../components/Forms/login-form/LoginForm\";\r\nimport { MapDispatchPropsType, MapStatePropsType } from \"./LoginContainer\";\r\n\r\nexport type LoginFormValuesType = {\r\n  login: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha?: string;\r\n};\r\n\r\nexport type LoginFormOwnPropsType = {\r\n  captchaURL?: string | null;\r\n};\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n  const onSubmit = (formData: LoginFormValuesType) => {\r\n    props.login(\r\n      formData.login,\r\n      formData.password,\r\n      formData.rememberMe,\r\n      formData.captcha\r\n    );\r\n  };\r\n\r\n  if (props.isAuth) {\r\n    return <Navigate to=\"/profile\" />;\r\n  }\r\n  return (\r\n    <div className=\"login__container\">\r\n      <div className=\"login__content\">\r\n        <div className=\"login__title\">Login</div>\r\n        <LoginReduxForm\r\n          onSubmit={onSubmit}\r\n          captchaURL={props.captchaURL}\r\n          {...props}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { connect } from \"react-redux\";\r\nimport { login } from '../../redux/thunks/authThunks';\r\nimport Login from \"./Login\";\r\nimport { compose } from \"redux\";\r\nimport { getCaptcha, getIsAuth } from \"../../redux/selectors/login-selectors\";\r\nimport { RootState } from \"redux/store/store\";\r\n\r\nexport type MapStatePropsType = {\r\n  isAuth: boolean;\r\n  captchaURL?: string;\r\n};\r\n\r\nexport type MapDispatchPropsType = {\r\n  login: (\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n  ) => void;\r\n};\r\n\r\nlet mapStateToProps = (state: RootState): MapStatePropsType => {\r\n  return {\r\n    isAuth: getIsAuth(state),\r\n    captchaURL: getCaptcha(state),\r\n  };\r\n};\r\n\r\nexport default compose(connect(mapStateToProps, {login}))(Login);\r\n","export type FieldValidationType = (value: string) => string\r\n\r\nexport const required: FieldValidationType = (value) => {\r\n  if (value) return undefined;\r\n  return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidationType => (value) => {\r\n  if (value) {\r\n    if (value.length > maxLength)  return `Max length is ${maxLength}`\r\n  }\r\n  return undefined\r\n}\r\n"],"names":["Checkbox","props","className","id","Field","name","component","type","CustomInput","input","meta","hasError","touched","error","inputStyles","padding","fontSize","width","color","fontWeight","backgroundColor","borderRadius","border","display","PURPLE","styles","Input","sx","BURGUNDY","WHITE","maxLength100","maxLengthCreator","maxLength50","reduxForm","form","handleSubmit","captchaURL","onSubmit","placeholder","validate","required","src","alt","marginTop","isAuth","to","formData","login","password","rememberMe","captcha","compose","connect","state","getIsAuth","getCaptcha","Login","value","maxLength","length"],"sourceRoot":""}